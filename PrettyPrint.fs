VARIABLE DEFINING
VARIABLE IN-STRING?
VARIABLE IN-COMMENT?
VARIABLE IN-LINE-COMMENT?

CREATE TOKEN 1024 ALLOT

: ITEM-LIST \ cccccbl ( -- list )
    CREATE 0 , ;

: FIND-ITEM ( addr # list -- addr | 0 )
    -ROT 2>R
    BEGIN
        @ DUP WHILE
        DUP CELL+ COUNT
        2R@ COMPARE 0= IF 2R> 2DROP EXIT THEN
    REPEAT 2R> 2DROP ;

: L, ( list addr # -- list )
    2>R HERE OVER @ , OVER ! 2R> S, ;

: L. ( list -- )
    L, DROP ;

: L ( -- addr # )
    BL PARSE ;

: .ITEMS ( addr -- )
    BEGIN
        @ DUP WHILE
        DUP CELL+ COUNT TYPE SPACE
    REPEAT DROP ;



ITEM-LIST DEFINING-WORDS
DEFINING-WORDS
L :         L, L CREATE    L, L VARIABLE  L, L CONSTANT  L, L 2VARIABLE L, L 2CONSTANT L.

ITEM-LIST FORTH-OPERATORS
FORTH-OPERATORS
L + L, L - L, L * L, L / L, L MOD L, L /MOD L, L NEGATE L, L AB[ L, L MIN L, L MAX L, L AND L, L OR L, L XOR L, L NOT L, L LSHIFT L, L RSHIFT L, L INVERT L, L 2* L, L 2/ L, L 1+ L, L 1- L, L 2+ L, L 2- L, L 8* L, L UNDER+ L, L M+ L, L */ L, L */MOD L, L M* L, L UM* L, L M*/ L, L UM/MOD L, L FM/MOD L, L SM/REM L, L D+ L, L D- L, L DNEGATE L, L DAB[ L, L DMIN L, L DMAX L, L D2* L, L D2/ L, L F+ L, L F- L, L F* L, L F/ L, L FNEGATE L, L FAB[ L, L FMAX L, L FMIN L, L FLOOR L, L FROUND L, L F** L, L FSQRT L, L FEXP L, L FEXPM1 L, L FLN L, L FLNP1 L, L FLOG L, L FALOG L, L FSIN L, L FCO[ L, L FSINCO[ L, L FTAN L, L FASIN L, L FACO[ L, L FATAN L, L FATAN2 L, L FSINH L, L FCOSH L, L FTANH L, L FASINH L, L FACOSH L, L FATANH L, L F2* L, L F2/ L, L 1/F L, L F~REL L, L F~AB[ L, L F~ L, L 0< L, L 0<= L, L 0<> L, L 0= L, L 0> L, L 0>= L, L < L, L <= L, L <> L, L = L, L > L, L >= L, L U< L, L U<= L, L U> L, L U>= L, L D0< L, L D0<= L, L D0<> L, L D0= L, L D0> L, L D0>= L, L D< L, L D<= L, L D<> L, L D= L, L D> L, L D>= L, L DU< L, L DU<= L, L DU> L, L DU>= L, L WITHIN L, L ?NEGATE L, L ?DNEGATE L, L TRUE L, L FALSE L, L . L, L U. L, L .R L, L U.R L.

ITEM-LIST CONTROL-WORDS
CONTROL-WORDS
L IF L, L ELSE L, L ENDIF L, L THEN L, L CASE L, L OF L, L ENDOF L, L ENDCASE L, L ?DUP-IF L, L ?DUP-0=-IF L, L AHEAD L, L CS-PICK L, L CS-ROLL L, L CATCH L, L THROW L, L WITHIN L, L BEGIN L, L WHILE L, L REPEAT L, L UNTIL L, L AGAIN L, L ?DO L, L LOOP L, L I L, L J L, L K L, L +DO L, L U+DO L, L -DO L, L U-DO L, L DO L, L +LOOP L, L -LOOP L, L UNLOOP L, L LEAVE L, L ?LEAVE L, L EXIT L, L DONE L, L FOR L, L NEXT L, L RECURSE L.

ITEM-LIST STACK-WORDS
STACK-WORDS
L DROP L, L NIP L, L DUP L, L OVER L, L TUCK L, L SWAP L, L ROT L, L -ROT L, L ?DUP L, L PICK L, L ROLL L, L 2DROP L, L 2NIP L, L 2DUP L, L 2OVER L, L 2TUCK L, L 2SWAP L, L 2ROT L, L 2-ROT L, L 3DUP L, L 4DUP L, L 5DUP L, L 3DROP L, L 4DROP L, L 5DROP L, L 8DROP L, L 4SWAP L, L 4ROT L, L 4-ROT L, L 4TUCK L, L 8SWAP L, L 8DUP L, L >R L, L R> L, L R@ L, L RDROP L, L 2>R L, L 2R> L, L 2R@ L, L 2RDROP L, L 4>R L, L 4R> L, L 4R@ L, L 4RDROP L, L FDROP L, L FNIP L, L FDUP L, L FOVER L, L FTUCK L, L FSWAP L, L FROT L, L SP@ L, L SP! L, L FP@ L, L FP! L, L RP@ L, L RP! L, L LP@ L, L LP! L, L DEPTH L.

ITEM-LIST ADDRESS-WORDS
ADDRESS-WORDS
L @ L, L ! L, L +! L, L C@ L, L C! L, L 2@ L, L 2! L, L F@ L, L F! L, L SF@ L, L SF! L, L DF@ L, L DF! L, L CHARS L, L CHAR+ L, L CELLS L, L CELL+ L, L CELL L, L ALIGN L, L ALIGNED L, L FLOATS L, L FLOAT+ L, L FLOAT L, L FALIGN L, L FALIGNED L, L SFLOATS L, L SFLOAT+ L, L SFALIGN L, L SFALIGNED L, L DFLOATS L, L DFLOAT+ L, L DFALIGN L, L DFALIGNED L, L MAXALIGN L, L MAXALIGNED L, L CFALIGN L, L CFALIGNED L, L ADDRESS-UNIT-BITS L, L ALLOT L, L ALLOCATE L, L HERE L, L MOVE L, L ERASE L, L CMOVE L, L CMOVE> L, L FILL L, L BLANK L, L UNUSED L.

ITEM-LIST STRING-WORDS
STRING-WORDS L S" L, L ." L, L ABORT" L.

ITEM-LIST COMMENT-WORDS
COMMENT-WORDS S" (" L.
\ comment"

ITEM-LIST NEW-WORDS

: IS-SPACE? ( c -- ? )
    DUP  32 =
    OVER 13 = OR
    SWAP 10 = OR ;

: IS-TOKEN-MATERIAL? ( c -- ? )
    33 256 WITHIN ;

: IS-EOL? ( c -- ? )
    DUP 4 <>
    OVER 13 AND
    SWAP 10 AND ;

: ?EMIT ( c -- )
    DUP 4 <> IF EMIT ELSE DROP THEN ;

: TIL-EOL ( -- )
    BEGIN
        KEY DUP IS-EOL? 0= WHILE
        EMIT
    REPEAT
    ?EMIT
    IN-LINE-COMMENT? OFF ;

: TIL-EOC ( -- )
    BEGIN
        KEY DUP IS-EOL? 0=
        OVER [CHAR] ) <> AND WHILE
        EMIT
    REPEAT
    ?EMIT
    IN-COMMENT? OFF ;

: TIL-EOS ( -- )
    BEGIN
        KEY DUP 4 <> OVER [CHAR] " <> AND OVER 13 <> AND OVER 10 <> AND WHILE
        EMIT
    REPEAT
    DUP 4 <> IF EMIT ELSE DROP THEN
    IN-STRING? OFF ;

: SKIP-SPACE ( -- c )
    BEGIN
        KEY DUP 4 <>
        OVER IS-TOKEN-MATERIAL? 0= AND WHILE
        EMIT
    REPEAT ;

: GET-TOKEN ( -- len,c )
    0
    SKIP-SPACE
    BEGIN
        DUP 4 <>
        OVER IS-TOKEN-MATERIAL? AND WHILE
        OVER TOKEN + C!
        1+
        KEY
    REPEAT ;

36 CONSTANT NAME_
32 CONSTANT NUMBER_
32 CONSTANT STRING_
35 CONSTANT COMMENT_
37 CONSTANT NEW-WORD_
37 CONSTANT DEFINING_
31 CONSTANT OPERATOR_
33 CONSTANT CONTROL_
33 CONSTANT STACK_
38 CONSTANT ADDRESS_

: COLOR ( n -- )
    ESC[ 2 .R [CHAR] m EMIT ;

: DEFINE ( addr # -- )
    NEW-WORDS -ROT L. ;

: IS-NEW-WORD? ( addr # -- ? )
    NEW-WORDS FIND-ITEM ;

: PRETTY-PRINT
    IN-STRING? OFF
    IN-COMMENT? OFF
    IN-LINE-COMMENT? OFF
    BEGIN
        IN-STRING? @ IF TIL-EOS THEN
        IN-COMMENT? @ IF TIL-EOC THEN
        IN-LINE-COMMENT? @ IF TIL-EOL THEN
        GET-TOKEN SWAP
        DUP WHILE
        DEFINING @ IF
            TOKEN OVER DEFINE
            DEFINING OFF
            DEFINING_ COLOR
        ELSE
            TOKEN OVER IS-NEW-WORD? IF
                NEW-WORD_ COLOR
            ELSE
                TOKEN OVER FIND-NAME IF
                    NAME_ COLOR
                    TOKEN OVER STRING-WORDS FIND-ITEM IF
                        IN-STRING? ON
                        STRING_ COLOR
                    THEN
                    TOKEN OVER COMMENT-WORDS FIND-ITEM IF
                        IN-COMMENT? ON
                        COMMENT_ COLOR
                    THEN
                    TOKEN OVER S" \" COMPARE 0= IF
                        IN-LINE-COMMENT? ON
                        COMMENT_ COLOR
                    THEN \ this is a line comment
                    TOKEN OVER DEFINING-WORDS  FIND-ITEM DEFINING !
                    TOKEN OVER FORTH-OPERATORS FIND-ITEM IF OPERATOR_ COLOR THEN
                    TOKEN OVER CONTROL-WORDS   FIND-ITEM IF CONTROL_ COLOR THEN
                    TOKEN OVER STACK-WORDS     FIND-ITEM IF STACK_ COLOR THEN
                    TOKEN OVER ADDRESS-WORDS   FIND-ITEM IF ADDRESS_ COLOR THEN
                ELSE
                    NUMBER_ COLOR
                THEN
            THEN
        THEN
        TOKEN SWAP TYPE
        EMIT
    REPEAT ;

PRETTY-PRINT BYE


